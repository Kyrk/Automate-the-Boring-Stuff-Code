PRACTICE QUESTIONS
1. What is the function that creates Regex objects?
- re.compile(r'expression')

2. Why are raw strings often used when creating Regex objects?
- To prevent collision between Python's and Regex's syntax usage of
  backslashes.

3. What does the search() method return?
- If a match is found, a Match object with a group() method containing matched
  text from the searched input string; None if no match was found.

4. How do you get the actual strings that match the pattern from a Match
object?
- Call the Match object's group() method.

5. In the regex created from r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group 0
cover? Group 1? Group 2?
- Entire regex; string contained in first set of parenthesis; '' second set.

6. Parenthesis and periods have specific meanings in regular expression syntax.
How would you specify that you want a regex to match actual parenthesis and
period characters?
- Preface character with backslash (E.G. \(text\), \.)

7. The findall() method returns a list of strings or a list of tuples of
strings. What makes it return one or the other?
- List of strings is returned if called regex has no groups, list of tuples of
  strings is returned if called regex has groups.

8. What does the | character signify in regular expressions?
- To match with one of multiple expressions or patterns.

9. What two things does the ? character signify in regular expressions?
- Optionally match a pattern (0-1 of preceding character/group); and match
  greedy search characters (dot-star .*) in a non-greedy fashion, i.e.
  completing regex match at first instance of the end of the regex.

10. What is the difference between the + and * characters in regular
expressions?
- * optionally matches a pattern (0 or more of preceding character/group) while
  + requires at least one instance of a pattern.

11. What is the difference between {3} and {3, 5} in regular expressions?
- {3} matches exactly 3 instances of preceding character/group, while {3, 5}
  matches 3-5 instances.

12. What do the \d, \w, and \s shorthand character classes signify in regular
expressions?
- \d - Digit characters 0-9
- \w - Letter, digit, or underscore _ character
- \s - Space, tab, or newline character

13. What do the \D, \W, and \S shorthand character classes signify in regular
expressions?
- \D - Any character NOT digit characters 0-9
- \W - Any character NOT letter, digit, or underscore
- \S - Any character NOT space, tab, or newline

14. What is the difference between .* and .*??
- .* is a greedy search algorithm, which stops matching at final instance of
  end of matched pattern, .*? is non-greedy, stopping at first instance of end
  of matched pattern.

15. What is the character class syntax to match all numbers and lowercase
letters?
- [a-z0-9]

16. How do you make a regular expression case-insensitive?
- re.compile(r'pattern', re.I) (re.IGNORECASE also works)

17. What does the . character normally match? What does it match if re.DOTALL
is passed as the second argument to re.compile()?
- Any character except newline; re.DOTALL matches all characters including
  newline.

18. If numRegex = re.compile(r'\d+'), what will numRegex.sub('X', '12 drummers,
11 pipers, five rings, 3 hens') return?
- 'X drummers, X pipers, five rings, X hens'

19. What does passing re.VERBOSE as the second argument to re.compile() allow
you to do?
- Ignores whitespace and comments inside regex string, allowing regexes to be
  spread to multiple lines for readability.

20. How would you write a regex that matches a number with commas for every
three digits? It must match the following: '42', '1,234', '6,368,745', but not
the following: '12,34,567', '1234'.
- re.compile(r'^\d{1-3}(,\d{3})$')

21. How would you write a regex that matches the full name of someone whose
lase name is Watanabe? You can assume the first name that comes before it will
always be one word that begins with a capital letter. The regex must match the
following: Haruto Watanabe, Alice Watanabe, RoboCop Watanabe, but not the
following: haruto Watanabe, Mr. Watanabe, Watanabe, Haruto watanabe.
- nameRegex = re.compile(r'[A-Z][a-zA-Z]* Watanabe')

22. How would you write a regex that matches a sentence where the first word is
either Alice, Bob, or Carol; the second word is either eats, pets, or throws;
the third word is apples, cats, or baseballs, and the sentence ends with a
period? This regex should be case-insensitive.
- re.compile(r'(Alice|Bob|Carol) (eats|pets|throws) (apples|cats|baseballs)\.',
  re.I)
